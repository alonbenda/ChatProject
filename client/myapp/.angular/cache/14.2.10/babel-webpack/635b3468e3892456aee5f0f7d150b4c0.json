{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n/** Represents an HTTP response. */\n\n\nvar HttpResponse =\n/** @class */\nfunction () {\n  function HttpResponse(statusCode, statusText, content) {\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n    this.content = content;\n  }\n\n  return HttpResponse;\n}();\n\nexport { HttpResponse };\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\n\nvar HttpClient =\n/** @class */\nfunction () {\n  function HttpClient() {}\n\n  HttpClient.prototype.get = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"GET\",\n      url: url\n    }));\n  };\n\n  HttpClient.prototype.post = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"POST\",\n      url: url\n    }));\n  };\n\n  HttpClient.prototype.delete = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"DELETE\",\n      url: url\n    }));\n  };\n  /** Gets all cookies that apply to the specified URL.\r\n   *\r\n   * @param url The URL that the cookies are valid for.\r\n   * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n   */\n  // @ts-ignore\n\n\n  HttpClient.prototype.getCookieString = function (url) {\n    return \"\";\n  };\n\n  return HttpClient;\n}();\n\nexport { HttpClient };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","HttpResponse","statusCode","statusText","content","HttpClient","get","url","options","send","method","post","delete","getCookieString"],"sources":["C:/Users/ALON/Projects/SOAProject/TalkBackProject/myapp/node_modules/@aspnet/signalr/dist/esm/HttpClient.js"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\n/** Represents an HTTP response. */\r\nvar HttpResponse = /** @class */ (function () {\r\n    function HttpResponse(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n    return HttpResponse;\r\n}());\r\nexport { HttpResponse };\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nvar HttpClient = /** @class */ (function () {\r\n    function HttpClient() {\r\n    }\r\n    HttpClient.prototype.get = function (url, options) {\r\n        return this.send(__assign({}, options, { method: \"GET\", url: url }));\r\n    };\r\n    HttpClient.prototype.post = function (url, options) {\r\n        return this.send(__assign({}, options, { method: \"POST\", url: url }));\r\n    };\r\n    HttpClient.prototype.delete = function (url, options) {\r\n        return this.send(__assign({}, options, { method: \"DELETE\", url: url }));\r\n    };\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    HttpClient.prototype.getCookieString = function (url) {\r\n        return \"\";\r\n    };\r\n    return HttpClient;\r\n}());\r\nexport { HttpClient };\r\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2BC,MAAM,CAACC,MAAlC,IAA4C,UAASC,CAAT,EAAY;EACnE,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;IACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;IACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;EACP;;EACD,OAAON,CAAP;AACH,CAPD;AAQA;;;AACA,IAAIU,YAAY;AAAG;AAAe,YAAY;EAC1C,SAASA,YAAT,CAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,OAA9C,EAAuD;IACnD,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACH;;EACD,OAAOH,YAAP;AACH,CAPiC,EAAlC;;AAQA,SAASA,YAAT;AACA;AACA;AACA;AACA;;AACA,IAAII,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,GAAsB,CACrB;;EACDA,UAAU,CAACP,SAAX,CAAqBQ,GAArB,GAA2B,UAAUC,GAAV,EAAeC,OAAf,EAAwB;IAC/C,OAAO,KAAKC,IAAL,CAAUrB,QAAQ,CAAC,EAAD,EAAKoB,OAAL,EAAc;MAAEE,MAAM,EAAE,KAAV;MAAiBH,GAAG,EAAEA;IAAtB,CAAd,CAAlB,CAAP;EACH,CAFD;;EAGAF,UAAU,CAACP,SAAX,CAAqBa,IAArB,GAA4B,UAAUJ,GAAV,EAAeC,OAAf,EAAwB;IAChD,OAAO,KAAKC,IAAL,CAAUrB,QAAQ,CAAC,EAAD,EAAKoB,OAAL,EAAc;MAAEE,MAAM,EAAE,MAAV;MAAkBH,GAAG,EAAEA;IAAvB,CAAd,CAAlB,CAAP;EACH,CAFD;;EAGAF,UAAU,CAACP,SAAX,CAAqBc,MAArB,GAA8B,UAAUL,GAAV,EAAeC,OAAf,EAAwB;IAClD,OAAO,KAAKC,IAAL,CAAUrB,QAAQ,CAAC,EAAD,EAAKoB,OAAL,EAAc;MAAEE,MAAM,EAAE,QAAV;MAAoBH,GAAG,EAAEA;IAAzB,CAAd,CAAlB,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;EACI;;;EACAF,UAAU,CAACP,SAAX,CAAqBe,eAArB,GAAuC,UAAUN,GAAV,EAAe;IAClD,OAAO,EAAP;EACH,CAFD;;EAGA,OAAOF,UAAP;AACH,CAtB+B,EAAhC;;AAuBA,SAASA,UAAT"},"metadata":{},"sourceType":"module"}